//SPDX-License-Identifier:MIT
pragma solidity 0.8.3;

//2 way to call parent constructoes 2种方法 运行父级合约构造函数的方法
//= 2种 向父级合约 构造函数输入参数的方法+构造函数运行的顺序
//Order of initialization

contract S{
    string public name;
    constructor(string memory _name){
        name=_name;
    }
}

contract T{
    string public text;
    constructor (string memory _text){
        text=_text;
    }
}
//第一种 （在继承时 定义变量名称 变量值）———前提：在已知函数内容的情况下 ：
//在继承时，在父级合约的名字后面加上一个括号 输入构造函数参数的变量 字符串类型 加上“ ” ——把构造函数参数传递进去
contract U is S("s"),T("t") {

}

//第二种 （在子合约中建立构造函数，再次把变量传入父级合约）———适用于：不知函数内容的情况，需要在部署时由部署者再输入
//在子合约中，再定义一个新的构造函数，在构造函数中 输入父级合约的构造函数的参数 
contract V is S,T{
//输入两个变量，要求这两个变量由部署者去输入，第一个变量传给S合约，第二个传给T合约
//再把这两个参数传给父级合约——后面加上：合约名称（变量）
    constructor(string memory _name,string memory _text) S(_name) T(_text) {

    }
    //  为什么会报错？！————中文输入法下的“（ ”导致的
}

//第三种方法：混合使用前两者 
//效果：一个是由继承时传进去的，一个是由部署时传进去的 
contract W is S("s"),T{
    constructor(string memory _text) T(_text){
        text=_text;
    }
}

//初始化合约的顺序： 综上：在运行构造函数时，把变量传给了父级合约 （这里有两个父级合约，两个的构造函数都要初始化————按继承顺序去初始化合约 
//Order of execution: 即使改变了声明父级合约构造函数的定义顺序 也没用 

//S——T——V1 
contract V1 is S,T{
    //取决于定义顺序
    constructor(string memory _name,string memory _text) T(_text) S(_name){

    }
}

//T——S——V2 
contract V2 is T,S{
    //取决于定义顺序
    constructor(string memory _name,string memory _text) T(_text) S(_name){
//                                                       对调 不影响
    }
}

//T——S——V3
contract V3 is T,S{
    constructor(string memory _name,string memory _text) T(_text) S(_name){
//                                                       对调 不影响
    }
}